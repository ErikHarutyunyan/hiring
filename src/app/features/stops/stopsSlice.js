// Importing necessary dependencies and services
import LocalService from "@/services/local.service";
import { createSlice } from "@reduxjs/toolkit";
import { getStopsData } from "./stopsActions";

// Initialize stopsList from session storage or set to null if not available
export const stopsList = LocalService.getDate("stops") || null;

// Define initial state for the stops slice
const initialState = {
	stopsList, // List of stops
	success: false,
	loading: stopsList ? false : true,
	error: null,
};

// Create stopsSlice using createSlice function
const stopsSlice = createSlice({
	name: "stops",
	initialState,
	reducers: {
		setCompletedStop: (state, { payload }) => {
			// A function that sets the completed status of a given `stop` in the `stopsList` by modifying the `completed` property of the matching `sequence_number`.
			state.stopsList = state.stopsList.map(item => {
				if (item.sequence_number === payload) {
					return { ...item, completed: true }; // Mark stop as completed
				}
				return item; // Return unchanged item if sequence_number doesn't match
			});
			// Save the updated stopsList to session storage
			LocalService.setDate("stops", state.stopsList);
		},
	},
	extraReducers: builder => {
		// Action handlers for getStopsData actions
		builder
			.addCase(getStopsData.pending, state => {
				state.loading = true;
				state.error = null;
				state.success = false;
			})
			.addCase(getStopsData.fulfilled, (state, { payload }) => {
				debugger;
				state.loading = false;
				state.stopsList = payload;
				state.success = true;
				// Save the updated stopsList to session storage
				LocalService.setDate("stops", payload);
			})
			.addCase(getStopsData.rejected, (state, { payload }) => {
				state.loading = true;
				state.error = payload;
				state.success = false;
			});
	},
});

// Selector function to select stopsList from the state
export const selectStopsList = state => state.stops;

// Export action creator for setCompletedStop from stopsSlice
export const { setCompletedStop } = stopsSlice.actions;

// Export the reducer function generated by createSlice
export default stopsSlice.reducer;
